name: Build Windows EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
          pip freeze > pip-freeze.txt

      - name: Build EXE (PyInstaller spec)
        run: |
          pyinstaller --clean EvidenceSynthesis.spec
          if (Test-Path dist) { dir dist -Recurse }

      - name: Smoke run (headless) + health check
        shell: pwsh
        env:
          STREAMLIT_SERVER_HEADLESS: "true"
          STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
          STREAMLIT_SERVER_PORT: "8501"
          STREAMLIT_SERVER_ADDRESS: "127.0.0.1"
          STREAMLIT_LOG_LEVEL: "info"
        run: |
          Write-Host "Listing dist contents:"
          if (Test-Path dist) { dir dist -Recurse } else { Write-Error "dist/ not found"; exit 1 }

          # Find the built EXE (works for onefile or onedir)
          $exe = Get-ChildItem -Path dist -Recurse -Filter *.exe `
            | Where-Object { $_.Name -like "*EvidenceSynthesisApp*.exe" } `
            | Select-Object -First 1 -ExpandProperty FullName
          if (-not $exe) { Write-Error "Could not find EvidenceSynthesisApp EXE under dist/"; exit 1 }

          $workdir = Split-Path $exe -Parent
          $stdoutPath = Join-Path $workdir "app-stdout.txt"
          $stderrPath = Join-Path $workdir "app-stderr.txt"

          Write-Host "Starting $exe with working directory $workdir ..."
          $p = Start-Process -FilePath $exe `
                              -WorkingDirectory $workdir `
                              -PassThru `
                              -NoNewWindow `
                              -RedirectStandardOutput $stdoutPath `
                              -RedirectStandardError  $stderrPath

          # Wait for health (allow extra time for first-run extraction)
          $deadline = (Get-Date).AddMinutes(4)
          $ok = $false
          while ((Get-Date) -lt $deadline) {
            try {
              $r = Invoke-WebRequest -Uri "http://127.0.0.1:8501/healthz" -UseBasicParsing -TimeoutSec 5
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch {
              Start-Sleep -Seconds 3
            }
          }

          # Clean up the process either way
          if ($p -and -not $p.HasExited) {
            try { Stop-Process -Id $p.Id -Force } catch {}
          }

          if (-not $ok) {
            Write-Host "=== /healthz did not become healthy ==="
            Write-Host "--- app stdout (tail) ---"
            if (Test-Path $stdoutPath) { Get-Content $stdoutPath -Tail 200 -ErrorAction SilentlyContinue } else { Write-Host "(no stdout captured)" }
            Write-Host "--- app stderr (tail) ---"
            if (Test-Path $stderrPath) { Get-Content $stderrPath -Tail 200 -ErrorAction SilentlyContinue } else { Write-Host "(no stderr captured)" }

            Write-Host "=== Attempting to print Streamlit logs (if any) ==="
            $userProfile = [Environment]::GetFolderPath("UserProfile")
            $logCandidates = @(
              (Join-Path $userProfile ".streamlit\logs"),
              (Join-Path $env:APPDATA "Streamlit\logs")
            )
            $printed = $false
            foreach ($ld in $logCandidates) {
              if (Test-Path $ld) {
                Write-Host "---- Log directory: $ld ----"
                Get-ChildItem $ld -Recurse -ErrorAction SilentlyContinue `
                  | Sort-Object LastWriteTime -Desc `
                  | Select-Object -First 3 `
                  | ForEach-Object {
                      Write-Host "---- Log: $($_.FullName) ----"
                      Get-Content $_.FullName -Tail 200 -ErrorAction SilentlyContinue
                      $printed = $true
                    }
              }
            }
            if (-not $printed) { Write-Host "(No Streamlit logs found.)" }

            Write-Error "App did not become healthy on /healthz"
            exit 1
          }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: |
            dist/**
            pip-freeze.txt
            **/streamlit*.log
          if-no-files-found: warn
