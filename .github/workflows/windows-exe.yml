name: Build Windows EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
          pip freeze > pip-freeze.txt

      - name: Build EXE
        run: |
          pyinstaller --clean EvidenceSynthesis.spec
          if (Test-Path dist) { dir dist -Recurse }

      - name: Smoke run (headless) + health check
        shell: pwsh
        env:
          STREAMLIT_SERVER_HEADLESS: "true"
          STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
          STREAMLIT_SERVER_PORT: "8501"
          STREAMLIT_SERVER_ADDRESS: "127.0.0.1"
        run: |
          Write-Host "Listing dist contents:"
          if (Test-Path dist) { dir dist -Recurse } else { Write-Error "dist/ not found"; exit 1 }

          # Find the built EXE (works for onefile or onedir)
          $exe = Get-ChildItem -Path dist -Recurse -Filter *.exe `
            | Where-Object { $_.Name -like "*EvidenceSynthesisApp*.exe" } `
            | Select-Object -First 1 -ExpandProperty FullName

          if (-not $exe) {
            Write-Error "Could not find EvidenceSynthesisApp EXE under dist/"
            exit 1
          }

          $workdir = Split-Path $exe -Parent
          Write-Host "Starting $exe with working directory $workdir ..."
          $p = Start-Process -FilePath $exe -WorkingDirectory $workdir -PassThru

          # Wait for health
          $deadline = (Get-Date).AddMinutes(2)
          $ok = $false
          while ((Get-Date) -lt $deadline) {
            try {
              $r = Invoke-WebRequest -Uri "http://127.0.0.1:8501/healthz" -UseBasicParsing -TimeoutSec 5
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -Seconds 2 }
          }

          # Clean up the process
          if ($p -and -not $p.HasExited) {
            try { Stop-Process -Id $p.Id -Force } catch {}
          }

          if (-not $ok) { Write-Error "App did not become healthy on /healthz"; exit 1 }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: |
            dist/**
            pip-freeze.txt
            **/streamlit*.log
          if-no-files-found: warn
