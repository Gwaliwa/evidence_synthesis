name: Build Windows EXE

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('windows-build-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip tooling
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -r windows-build-requirements.txt

      # --- Build the EXE using launcher as entrypoint ---
      - name: Build (onefile + launcher, include metadata)
        run: >
          pyinstaller --clean --onefile --noconsole
          --name EvidenceSynthesisApp
          --add-data "app.py;."
          --collect-all streamlit
          --collect-all pandas
          --collect-all numpy
          --collect-all pillow
          --collect-all PyPDF2
          --collect-all pdfplumber
          --collect-all fitz
          --collect-all pdf2image
          --collect-all pytesseract
          --collect-all matplotlib
          --collect-all openpyxl
          --collect-all xlsxwriter
          --copy-metadata streamlit
          --copy-metadata altair
          --copy-metadata watchdog
          --copy-metadata tornado
          --copy-metadata protobuf
          launch.py

      # --- Smoke-test the binary: start it, wait for HTTP to respond, then stop ---
      - name: Smoke test .exe (start, ping /healthz, stop)
        shell: pwsh
        timeout-minutes: 5
        run: |
          $exe = Join-Path "dist" "EvidenceSynthesisApp.exe"
          if (!(Test-Path $exe)) {
            Write-Host "❌ No EXE produced at $exe"
            exit 1
          }

          # start the program
          Write-Host "Starting $exe ..."
          $p = Start-Process -FilePath $exe -PassThru -WorkingDirectory (Split-Path $exe)

          # poll for health
          $ok = $false
          $url = "http://127.0.0.1:8501/healthz"
          for ($i=0; $i -lt 60; $i++) {
            Start-Sleep -Seconds 1
            try {
              $resp = Invoke-WebRequest $url -UseBasicParsing -TimeoutSec 2
              if ($resp.StatusCode -ge 200 -and $resp.StatusCode -lt 500) {
                $ok = $true
                break
              }
            } catch { }
          }

          if (-not $ok) {
            Write-Host "❌ App did not become healthy on $url"
            # dump the last 200 lines of stderr/stdout if present
            Get-ChildItem -Path (Split-Path $exe) -Filter "*.log" -ErrorAction SilentlyContinue | %{
              Write-Host "--- LOG: $($_.FullName) ---"
              Get-Content $_.FullName -Tail 200 | Write-Host
            }
            if ($p -and -not $p.HasExited) { Stop-Process -Id $p.Id -Force }
            exit 1
          }

          Write-Host "✅ App is healthy on $url"
          if ($p -and -not $p.HasExited) { Stop-Process -Id $p.Id -Force }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-windows-exe
          path: dist/EvidenceSynthesisApp.exe
          if-no-files-found: error
